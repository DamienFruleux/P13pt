* script should not crash when trying to load invalid DUT folder
* spectrum fitter should replace backslashes in results file
* put version string in result files
* add button to unload the model / remove the model curves
* for model, dut, dummy, thru, config should be updated also if the text field is changed
  (not only if browse button is used)
  -> config should be saved on successful load

* add button to plot raw DUT, dummy, Thru S params
* add button to de-embed Ra
* check touchstone import (made the script crash last time)
* check if results recognition works if thru or dummy is not defined
* when saving the results, make sure there is no KeyError for filename parameters
* loading the fitting parameters
  -> need to verify that model params are compatible
  -> need to verify that dataset is compatible
  -> need to update plotting area after loading
* let the user also decide a frequency range in which he wants to fit
* allow non-integer values for fitting params
* need to be able to modify range of sliders
* put a function to export deembedded admittance spectra
* make a program that can plot spectra from fitresults (by clicking on datapoints)
* error when loading model before spectra
* we should impose the order of the fitting parameters
* the default fit method could be created automatically / be in a base class
* make a history of fitting values every time they change so that the user can restore what was before fit
* add fit result "grade"
* save results file in windows compatible format (CRLF)
* check dataset coherence (i.e. all spectra have same number of frequency points and values can be read etc.)
* indicate if de-embedding went well (e.g. green indicator behind data browser field)
* when using "fit all", should disable interface but add stop button
* the save results section should rather be controlled by the main widget since it manages all the model results too
* no need for signal mapper for sliders, can just update all model values using slider dictionary
* reset_values should not be in the model class